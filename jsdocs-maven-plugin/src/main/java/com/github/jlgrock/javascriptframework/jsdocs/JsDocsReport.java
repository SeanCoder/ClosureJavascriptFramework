package com.github.jlgrock.javascriptframework.jsdocs;

import java.io.File;
import java.util.ArrayList;
import java.util.Locale;

import org.apache.log4j.Logger;
import org.apache.maven.doxia.sink.Sink;
import org.apache.maven.doxia.sink.SinkFactory;
import org.apache.maven.reporting.MavenReport;
import org.apache.maven.reporting.MavenReportException;

/**
 * Generates javascript docs from the jsdoc-toolkit (the final version).
 * 
 * @goal jsdoc-report
 */
public class JsDocsReport extends AbstractJsDocsMojo implements MavenReport {

	/**
	 * Constructor.
	 */
	public JsDocsReport() {
		LOGGER.debug("initializing JsDocsReport...");
	}
	/**
	 * The Logger.
	 */
	private static final Logger LOGGER = Logger
			.getLogger(JsDocsReport.class);

	/**
	 * @return the name
	 */
	public final String getName() {
		return name;
	}

	/**
	 * @return the description
	 */
	public final String getDescription() {
		return description;
	}

	/**
	 * @return the failOnError
	 */
	public final boolean isFailOnError() {
		return failOnError;
	}
	/**
	 * The path to the JavaScript source directory). Default is
	 * src/main/javascript
	 */
	private ArrayList<File> sourceDirectories;

	/**
	 * Specifies the destination directory where javadoc saves the generated
	 * HTML files.
	 * 
	 * @parameter expression="${reportOutputDirectory}"
	 *            default-value="${project.reporting.outputDirectory}/jsapidocs"
	 */
	private File reportOutputDirectory;
	
	/**
	 * The name of the Javadoc report to be displayed in the Maven Generated
	 * Reports page (i.e. <code>project-reports.html</code>).
	 * 
	 * @since 2.1
	 * @parameter expression="${name}"
	 */
	private String name;


    /**
     * The description of the Javadoc report to be displayed in the Maven Generated Reports page
     * (i.e. <code>project-reports.html</code>).
     *
     * @since 2.1
     * @parameter expression="${description}"
     */
    private String description;

    /**
     * TODO
     * Specifies if the build will fail if there are errors during javadoc execution or not.
     *
     * @parameter expression="${maven.jsdoc.failOnError}" default-value="true"
     */
    private boolean failOnError;

    @Override
	public String getDescription(final Locale locale) {
		//return description;
		return "API Documentation generated by JSDoc Toolkit";
	}

    @Override
	public String getName(final Locale locale) {
		String returnVal;
		//if (StringUtils.isEmpty(name)) {
			returnVal = "JSDocsAPI";
		//} else {
			//returnVal = name;
		//}
		return returnVal;
	}

	@Override
	public String getOutputName() {
		return getDestDir() + File.separator + "index";
	}

	@Override
	public boolean isExternalReport() {
		return true;
	}

	/**
	 * Generates the report.
	 * @param aSink the sink passed in by maven
	 * @param aLocale the locale to adjust for
	 * @throws MavenReportException if there is a problem with the generate
	 */
	public final void generate( final org.codehaus.doxia.sink.Sink aSink, final Locale aLocale ) throws MavenReportException {
		LOGGER.error( "Deprecated API called - not org.apache.maven.doxia.sink.Sink instance and no SinkFactory"
				+ " available. Please update this plugin." );
		generate( aSink, null, aLocale );
	}
	
	/**
	 * Generates the report.
	 * @param aSink the sink passed in by maven
	 * @param aLocale the locale to adjust for
	 * @throws MavenReportException if there is a problem with the generate
	 */
	public final void generate( final Sink aSink, final Locale aLocale ) throws MavenReportException {
		LOGGER.error( "Deprecated API called - no SinkFactory available. Please update this plugin." );
		generate( aSink, null, aLocale );
	}
	
	/**
	 * This method is called when the report generation is invoked by maven-site-plugin.
	 *
	 * @param aSink the Sink passed by Maven
	 * @param aSinkFactory the Sink factory passed by Maven
	 * @param aLocale the locale
	 * @throws MavenReportException if there are any problems with generation
	 */
	public final void generate( final Sink aSink, final SinkFactory aSinkFactory, final Locale aLocale )
	throws MavenReportException {
		setOutputDirectory(getReportOutputDirectory());
		LOGGER.debug("reportingOutputDir: " + getReportOutputDirectory());
		LOGGER.debug("outputDir: " + getOutputDirectory());
		LOGGER.debug("outputName: " + getOutputName());
		LOGGER.debug("getCategoryName: " + getCategoryName());
		LOGGER.debug("getName: " + getName(null));
		LOGGER.debug("getDescription: " + getDescription( null ));

		try {
			execute();
		} catch (Exception e) {
			throw new MavenReportException(e.getMessage(), e);
		}
	}

	@Override
	public final File getReportOutputDirectory() {
		return reportOutputDirectory;
	}

	@Override
	public final void setReportOutputDirectory(final File reportOutputDirectoryIn) {
		reportOutputDirectory = reportOutputDirectoryIn;
	}

	@Override
	public final String getCategoryName() {
		return "JsDocs";
	}

	@Override
	public final boolean canGenerateReport() {
		return true;
	}

	@Override
	public final ArrayList<File> getSourceDirectories() {
		if (sourceDirectories == null) {
			ArrayList<File> srcDirs = new ArrayList<File>();
			srcDirs.add(new File(getBaseDir(), "src/main/javascript"));
			srcDirs.add(new File(getBaseDir(), "target/javascriptFramework/internDependencies/debugSource"));
			return srcDirs;
		}
		return sourceDirectories;
	}

	@Override
	protected final boolean isAggregator() {
		return false;
	}

	@Override
	protected final String getClassifier() {
		return "jsdocs";
	}

	@Override
	protected final File getArchiveOutputDirectory() {
		return null;
	}


}
