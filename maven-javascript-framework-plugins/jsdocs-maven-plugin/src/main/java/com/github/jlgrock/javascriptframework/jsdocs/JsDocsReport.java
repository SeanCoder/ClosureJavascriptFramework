package com.github.jlgrock.javascriptframework.jsdocs;

import java.io.File;
import java.util.Locale;

import org.apache.log4j.Logger;
import org.apache.maven.doxia.sink.Sink;
import org.apache.maven.doxia.sink.SinkFactory;
import org.apache.maven.reporting.MavenReport;
import org.apache.maven.reporting.MavenReportException;
import org.codehaus.plexus.util.StringUtils;

/**
 * Generates javascript docs from the jsdoc-toolkit (the final version).
 * 
 * @goal jsdoc-report
 */
public class JsDocsReport extends AbstractJsDocsMojo implements MavenReport {

	public JsDocsReport() {
		System.out.println("initializing JsDocsReport...");
	}
	/**
	 * The Logger.
	 */
	private static final Logger LOGGER = Logger
			.getLogger(JsDocsReport.class);

	/**
	 * The path to the JavaScript source directory). Default is
	 * src/main/javascript
	 * 
	 * @parameter expression="${basedir}/src/main/javascript"
	 */
	private File sourceDirectory;

	/**
	 * Specifies the destination directory where javadoc saves the generated
	 * HTML files.
	 * 
	 * @parameter expression="${reportOutputDirectory}"
	 *            default-value="${project.reporting.outputDirectory}/jsapidocs"
	 */
	private File reportOutputDirectory;
	
	/**
	 * The name of the Javadoc report to be displayed in the Maven Generated
	 * Reports page (i.e. <code>project-reports.html</code>).
	 * 
	 * @since 2.1
	 * @parameter expression="${name}"
	 */
	private String name;


    /**
     * The description of the Javadoc report to be displayed in the Maven Generated Reports page
     * (i.e. <code>project-reports.html</code>).
     *
     * @since 2.1
     * @parameter expression="${description}"
     */
    private String description;

    /**
     * TODO
     * Specifies if the build will fail if there are errors during javadoc execution or not.
     *
     * @parameter expression="${maven.jsdoc.failOnError}" default-value="true"
     */
    protected boolean failOnError;

    /** {@inheritDoc} */
	public String getDescription(final Locale locale) {
		//return description;
		return "API Documentation generated by JSDoc Toolkit";
	}

    /** {@inheritDoc} */
	public String getName(final Locale locale) {
		String returnVal;
		//if (StringUtils.isEmpty(name)) {
			returnVal = "JSDocsAPI";
		//} else {
			//returnVal = name;
		//}
		return returnVal;
	}

	@Override
	public String getOutputName() {
		return getDestDir() + File.separator + "index";
	}

	@Override
	public boolean isExternalReport() {
		System.out.println("Checked isExternalReport...");
		return true;
	}


	public void generate( org.codehaus.doxia.sink.Sink aSink, Locale aLocale ) throws MavenReportException {
		LOGGER.error( "Deprecated API called - not org.apache.maven.doxia.sink.Sink instance and no SinkFactory"
				+ " available. Please update this plugin." );
		System.out.println("deprecated (1)...");
		generate( aSink, null, aLocale );
	}

	public void generate( Sink aSink, Locale aLocale ) throws MavenReportException {
		LOGGER.error( "Deprecated API called - no SinkFactory available. Please update this plugin." );
		System.out.println("deprecated (2)...");
		generate( aSink, null, aLocale );
	}
	
	/**
	 * This method is called when the report generation is invoked by maven-site-plugin.
	 *
	 * @param aSink
	 * @param aSinkFactory
	 * @param aLocale
	 * @throws MavenReportException
	 */
	public void generate( Sink aSink, SinkFactory aSinkFactory, Locale aLocale )
	throws MavenReportException {
		System.out.println("starting report generation (2)...");
		setOutputDirectory(getReportOutputDirectory());
		System.out.println("reportingOutputDir: " + getReportOutputDirectory());
		System.out.println("outputDir: " + getOutputDirectory());
		System.out.println("outputName: " + getOutputName());
		System.out.println("getCategoryName: " + getCategoryName());
		System.out.println("getName: " + getName(null));
		System.out.println("getDescription: " + getDescription( null ));

		try {
			execute();
		} catch (Exception e) {
			throw new MavenReportException(e.getMessage(), e);
		}
	}

	@Override
	public File getReportOutputDirectory() {
		System.out.println("getReportOutputDirectory...");
		return reportOutputDirectory;
	}

	@Override
	public final void setReportOutputDirectory(final File reportOutputDirectoryIn) {
		System.out.println("setReportOutputDirectory...");
		reportOutputDirectory = reportOutputDirectoryIn;
	}

	@Override
	public String getCategoryName() {
		return "JsDocs";
	}

	@Override
	public boolean canGenerateReport() {
		System.out.println("canGenerateReport...");
		return true;
	}

	@Override
	public File getSourceDirectory() {
		return sourceDirectory;
	}

	@Override
	protected boolean isAggregator() {
		return false;
	}

	@Override
	protected String getClassifier() {
		return "jsdocs";
	}

	@Override
	protected File getArchiveOutputDirectory() {
		return null;
	}


}
